export = Uu5TilesControls;
declare namespace Uu5TilesControls {
    interface BulkActionBar$Props {
        padding?: any;
    }
    function BulkActionBar(props: BulkActionBar$Props): any;
    interface Counter$Props {
        pageIndex?: number;
        itemList?: any[];
        displayShowing?: boolean;
        displayTotal?: boolean;
        displayResults?: boolean;
    }
    function Counter(props: Counter$Props): any;
    interface FilterBar$Props {
        initialExpanded?: boolean;
        readOnly?: boolean;
        filterKeyList?: string[];
        displayClearButton?: boolean;
        displayManagerButton?: boolean;
        displayCloseButton?: boolean;
        padding?: any;
    }
    function FilterBar(props: FilterBar$Props): any;
    interface FilterButton$Props {
        type?: "bar" | "manager" | "tableHeader";
    }
    function FilterButton(props: FilterButton$Props): any;
    interface FilterManagerModal$Props {
        children?: any;
    }
    function FilterManagerModal(props: FilterManagerModal$Props): any;
    interface FormFilterManager$Props {
        value?: any[];
        onChange?(...args: any): any;
        columnCount?: any;
        filterKeyList?: string[];
    }
    function FormFilterManager(props: FormFilterManager$Props): any;
    namespace FormFilterManager {
        const Input: any;
        const name: "filterList";
    }
    interface FormInitialPresetManager$Props {
        value?: string;
        onChange?(...args: any): any;
    }
    function FormInitialPresetManager(props: FormInitialPresetManager$Props): any;
    namespace FormInitialPresetManager {
        const Input: any;
        const name: "initialPresetValue";
    }
    interface FormPresetManager$Props {
        value?: any[];
        onChange?(...args: any): any;
    }
    function FormPresetManager(props: FormPresetManager$Props): any;
    namespace FormPresetManager {
        const Input: any;
        const name: "presetList";
    }
    interface FormSerieManager$Props {
        value?: any[];
        onChange?(...args: any): any;
        searchable?: boolean;
    }
    function FormSerieManager(props: FormSerieManager$Props): any;
    namespace FormSerieManager {
        const Input: any;
        const name: "serieList";
    }
    interface FormSorterManager$Props {
        value?: any[];
        onChange?(...args: any): any;
        sorterKeyList?: string[];
    }
    function FormSorterManager(props: FormSorterManager$Props): any;
    namespace FormSorterManager {
        const Input: any;
        const name: "sorterList";
    }
    interface PresetBar$Props {
        initialExpanded?: boolean;
        displayAddButton?: boolean;
        displayManagerButton?: boolean;
        displayCloseButton?: boolean;
        padding?: any;
    }
    function PresetBar(props: PresetBar$Props): any;
    interface PresetButton$Props {
        type?: "dropdown" | "manager" | "save" | "bar";
    }
    function PresetButton(props: PresetButton$Props): any;
    interface PresetManagerModal$Props {
        children?: any;
    }
    function PresetManagerModal(props: PresetManagerModal$Props): any;
    function PresetSaveModal(props: any): any;
    function SearchButton(props: any): any;
    function SerieButton(props: any): any;
    interface SerieManagerModal$Props {
        searchable?: boolean;
        children?: any;
    }
    function SerieManagerModal(props: SerieManagerModal$Props): any;
    interface SorterBar$Props {
        initialExpanded?: boolean;
        sorterKeyList?: string[];
        displayClearButton?: boolean;
        displayManagerButton?: boolean;
        displayCloseButton?: boolean;
        padding?: any;
    }
    function SorterBar(props: SorterBar$Props): any;
    interface SorterButton$Props {
        type?: "bar" | "dropdown" | "manager";
    }
    function SorterButton(props: SorterButton$Props): any;
    interface SorterManagerModal$Props {
        children?: any;
    }
    function SorterManagerModal(props: SorterManagerModal$Props): any;
    function ViewButton(props: any): any;
}